// import { popperOffsets } from "@popperjs/core";
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { getNameOfJSDocTypedef } from "typescript";
import { RootState, AppThunk } from "../../store/store";
import { fetchTasks } from "./tasksAPI";
import {
  userData,
  Task,
  Status,
  PlantModel,
  Frequency,
  asyncStatus,
} from "../../../types/api";
import { response } from "express";
import { request } from "http";

export const initialTask: Task = {
  id: "demo task",
  taskName: "Drink water",
  plantName: "Henry",
  model: PlantModel.Flower,
  status: Status.Great,
  Frequency: Frequency.Hours12,
  actionCount: 0,
};

export const initialState: userData = {
  id: "demo user",
  tasks: [initialTask],
  points: 0,
  currentStreak: 0,
  longestStreak: 0,
  asyncStatus: asyncStatus.idle,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests
// thunks can take one arguments so we will send one object with multiple properties
export const UpdateTasksAsync = createAsyncThunk(
  // The first argument is the action name:
  "fetch/updateTasks", //action names can appear in the redux dev tools
  // @param arg { endpoint: endpoint, request: {} }
  async (args: any) => {
    const { endpoint, request } = args;
    const response = await fetch(endpoint, request);
    // catch errors from fetch
    if (!response.ok) {
      const message = `An error has occured: ${response.status}`;
      throw new Error(message);
    }
    // Also, set a type for the `data` constant:
    const data: Task[] = await response.json();
    // The value we return becomes the `fulfilled` action payload
    console.log(data);
    return data;
  }
);

export const tasksSlice: any = createSlice({
  name: "task",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  // Redux Toolkit allows us to write "mutating" logic in reducers. It
  // doesn't actually mutate the state because it uses the Immer library,
  // which detects changes to a "draft state" and produces a brand new
  // immutable state based off those changes
  reducers: {
    increment: (state) => {
      state.points += 1;
    },
    decrement: (state) => {
      state.points -= 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // all reducers that need an async call go here, including actions generated by
  // createAsyncThunk or in other slices.
  //the state can be differfrent while the async database communcaation is happening
  extraReducers: (builder) => {
    builder
      .addCase(UpdateTasksAsync.pending, (state) => {
        state.asyncStatus = asyncStatus.loading;
        // while status is loading, we want to change the test on the frontend
        // for that value? it turns grey so its updated but can't be clicked again
      })
      .addCase(UpdateTasksAsync.fulfilled, (state, action) => {
        state.asyncStatus = asyncStatus.idle;
        state.tasks = action.payload;
      })
      .addCase(UpdateTasksAsync.rejected, (state) => {
        state.asyncStatus = asyncStatus.failed;
        // if it fails it will revert back? (need to save a copy of state from before
        // the async call (save a copy of the state as closure in the saync function))
      });
  },
});

export const { increment, decrement, extraReducers } = tasksSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTask = (state: RootState) => state.tasks;

export default tasksSlice.reducer;
